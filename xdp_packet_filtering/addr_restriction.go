package main

import (
	"encoding/binary"
	"fmt"
	"github.com/cilium/ebpf/link"
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go bpf addr_restrictions.bpf.c -- -I./headers

const (
	keyNum  = uint32(0xdeadbeef)
	enable  = 1
	disable = 0
)

func convertIPStringToUint32(ipaddr string) uint32 {
	saddr := net.ParseIP(ipaddr)
	return binary.NativeEndian.Uint32(saddr.To4())
}

func convertMACStringToUint8Array(macaddr string) [6]uint8 {
	smac, err := net.ParseMAC(macaddr)
	if err != nil {
		log.Fatalf("parsing MAC address: %s", err)
	}
	return [6]uint8(smac)
}

func main() {
	// Handle Ctrl+C.
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT)

	if len(os.Args) < 2 {
		log.Fatalf("Please specify a network interface")
	}

	// Look up the network interface by name.
	ifaceName := os.Args[1]
	iface, err := net.InterfaceByName(ifaceName)
	if err != nil {
		log.Fatalf("lookup network iface %q: %s", ifaceName, err)
	}

	// Load pre-compiled programs into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %s", err)
	}
	defer objs.Close()

	// Attach the program.
	l, err := link.AttachXDP(link.XDPOptions{
		Program:   objs.XdpAddrRestrictions,
		Interface: iface.Index,
	})
	if err != nil {
		log.Fatalf("could not attach XDP program: %s", err)
	}
	defer l.Close()

	log.Printf("Attached XDP program to iface %q (index %d)", iface.Name, iface.Index)
	log.Printf("Press Ctrl-C to exit and remove the program")

	// data structure is generated by bpf2go (struct addr_restrictions in addr_restrictions.bpf.c)
	restrictions := bpfAddrRestrictions{
		Saddr:       convertIPStringToUint32("192.168.10.17"),
		Smac:        convertMACStringToUint8Array("5c:1b:f4:7b:1c:49"),
		EnableSaddr: enable,
		EnableSmac:  enable,
	}

	if err := objs.AddrRestrictionsMap.Put(keyNum, restrictions); err != nil {
		log.Fatalf("putting into map: %s\n", err)
	}

	if <-sigs; true {
		_, _ = fmt.Fprintf(os.Stderr, "received SIGINT, cancelling\n")
	}
}
